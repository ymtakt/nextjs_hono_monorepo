# GitLab CI/CD モノレポ設定
# Frontend/Backend分離型テスト・カバレッジ検証（MR対応）

stages:
  - lint
  - test

variables:
  NODE_VERSION: "20"
  HUSKY: 0
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"

# グローバルキャッシュ設定
.cache_template: &cache_template
  cache:
    key:
      files:
        - bun.lock
        - package.json
    paths:
      - node_modules/
      - typescript/frontend/node_modules/
      - typescript/backend/node_modules/
    policy: pull-push

# 共通ルール
.common_rules: &common_rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# 共通のPrisma生成処理
.generate_prisma: &generate_prisma
  - echo "🔧 Generating Prisma client..."
  - cd typescript/backend
  - bun run db:generate
  - cd ../..

# Lintチェック（全体）
lint:check:
  stage: lint
  image: oven/bun:latest
  <<: *cache_template
  before_script:
    - echo "📦 Installing dependencies..."
    - bun install
    - *generate_prisma
  script:
    - echo "🔍 Running lint checks..."
    - bun run check:ci
  <<: *common_rules

# フロントエンドテスト
test:frontend:
  stage: test
  image: oven/bun:latest
  <<: *cache_template
  before_script:
    - bun install
    - *generate_prisma
  script:
    - echo "🧪 Running frontend tests with coverage..."
    - cd typescript/frontend
    - bun run test:coverage
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: typescript/frontend/coverage/cobertura-coverage.xml
    paths:
      - typescript/frontend/coverage/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/frontend/**/*
        - package.json
        - bun.lock
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# バックエンドテスト（PostgreSQL必須）
test:backend:
  stage: test
  image: oven/bun:latest
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: myapp_test
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/myapp_test"
  <<: *cache_template
  before_script:
    # PostgreSQLクライアントをインストール
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    # PostgreSQLの準備完了を待機
    - echo "⏳ PostgreSQLの準備完了を待機中..."
    - until pg_isready -h postgres -p 5432 -U testuser; do sleep 1; done
    - bun install
    - *generate_prisma
  script:
    - echo "🧪 Running backend tests with coverage..."
    - cd typescript/backend
    - echo "🚀 Running tests..."
    - bun run test:coverage
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: typescript/backend/coverage/cobertura-coverage.xml
    paths:
      - typescript/backend/coverage/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/backend/**/*
        - package.json
        - bun.lock
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# フロントエンドビルド検証（MRのみ）
build:frontend:
  stage: test
  image: oven/bun:latest
  <<: *cache_template
  before_script:
    - bun install
    - *generate_prisma
  script:
    - echo "🏗️ Building frontend for validation..."
    - cd typescript/frontend
    - bun run build
  artifacts:
    paths:
      - typescript/frontend/.next/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/frontend/**/*
        - typescript/backend/**/* # backendの変更もfrontendビルドの対象にする
        - package.json
        - bun.lock
