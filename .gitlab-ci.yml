# GitLab CI/CD モノレポ設定
# Frontend/Backend分離型テスト・カバレッジ検証（MR対応）

stages:
  - lint
  - test
  - coverage-report

variables:
  NODE_VERSION: "20"
  # キャッシュ設定
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"

# グローバルキャッシュ設定
.cache_template: &cache_template
  cache:
    key:
      files:
        - package.json
        - bun.lock
        - typescript/frontend/package.json
        - typescript/backend/package.json
    paths:
      - node_modules/
      - typescript/frontend/node_modules/
      - typescript/backend/node_modules/
      - .npm/

# 依存関係インストール（共通ジョブ）
install_dependencies:
  stage: .pre
  image: oven/bun:latest
  <<: *cache_template
  script:
    - echo "📦 Installing dependencies..."
    - bun install
    - cd typescript/frontend && bun install
    - cd ../backend && bun install
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Lintチェック（高速検証）
lint:check:
  stage: lint
  image: oven/bun:latest
  <<: *cache_template
  script:
    - echo "🔍 Running lint checks..."
    - bun run check:ci
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# フロントエンドテスト（カバレッジ付き）
test:frontend:
  stage: test
  image: oven/bun:latest
  <<: *cache_template
  script:
    - echo "🧪 Running frontend tests with coverage..."
    - cd typescript/frontend
    - bun run test:coverage
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: typescript/frontend/coverage/cobertura-coverage.xml
    paths:
      - typescript/frontend/coverage/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# バックエンドテスト（カバレッジ付き、PostgreSQL必須）
test:backend:
  stage: test
  image: oven/bun:latest
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: myapp_test
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/myapp_test"
  <<: *cache_template
  before_script:
    # PostgreSQLクライアントをインストール
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    # PostgreSQLの準備完了を待機
    - echo "⏳ PostgreSQLの準備完了を待機中..."
    - until pg_isready -h postgres -p 5432 -U testuser; do sleep 1; done
  script:
    - echo "🧪 Running backend tests with coverage..."
    - cd typescript/backend
    - echo "🔧 Generating Prisma client..."
    - bun run db:generate
    - echo "🚀 Running tests..."
    - bun run test:coverage
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: typescript/backend/coverage/cobertura-coverage.xml
    paths:
      - typescript/backend/coverage/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# カバレッジ検証とレポート
coverage:validation:
  stage: coverage-report
  image: oven/bun:latest
  script:
    - echo "📊 Validating coverage thresholds..."
    - echo "Frontend coverage validation:"
    - cd typescript/frontend && bun run test:coverage --reporter=text
    - echo "Backend coverage validation:"
    - cd ../backend && bun run test:coverage --reporter=text
    - echo "✅ All coverage thresholds met!"
  dependencies:
    - test:frontend
    - test:backend
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false

# MR専用ジョブ
.mr_only: &mr_only
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# オプション: MR用ビルド検証
build:frontend:
  stage: test
  image: oven/bun:latest
  <<: *cache_template
  <<: *mr_only
  script:
    - echo "🏗️ Building frontend for validation..."
    - cd typescript/frontend
    - bun run build
  artifacts:
    paths:
      - typescript/frontend/.next/
    expire_in: 1 hour
  only:
    - merge_requests
