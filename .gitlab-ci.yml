# GitLab CI/CD モノレポ設定
# 変更ファイルに応じた条件分岐対応

stages:
  - lint
  - test
  - coverage-report

variables:
  NODE_VERSION: "20"
  HUSKY: 0
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"

# グローバルキャッシュ設定（修正版）
.cache_template: &cache_template
  cache:
    key:
      files:
        - bun.lock
        - package.json
    paths:
      - node_modules/
      - typescript/frontend/node_modules/
      - typescript/backend/node_modules/
      - .npm/
    policy: pull-push

# 条件分岐ルール定義
.rules_frontend: &rules_frontend
  rules:
    # フロントエンド変更時
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/frontend/**/*
        - package.json
        - bun.lock
    # メインブランチは常に実行
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.rules_backend: &rules_backend
  rules:
    # バックエンド変更時
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/backend/**/*
        - package.json
        - bun.lock
    # メインブランチは常に実行
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.rules_lint: &rules_lint
  rules:
    # いずれかのコード変更時
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/**/*
        - "*.{js,ts,json,md}"
        - package.json
        - bun.lock
    # メインブランチは常に実行
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# 依存関係インストール（共通ジョブ）
install_dependencies:
  stage: .pre
  image: oven/bun:latest
  <<: *cache_template
  script:
    - echo "📦 Installing dependencies..."
    - bun install
    # Frontend依存関係（条件付きインストール）
    - |
      if [ -n "$(git diff --name-only origin/$CI_DEFAULT_BRANCH HEAD | grep '^typescript/frontend/')" ] || [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        echo "📦 Installing frontend dependencies..."
        cd typescript/frontend && bun install
      fi
    # Backend依存関係（条件付きインストール）
    - |
      if [ -n "$(git diff --name-only origin/$CI_DEFAULT_BRANCH HEAD | grep '^typescript/backend/')" ] || [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        echo "📦 Installing backend dependencies..."
        cd typescript/backend && bun install
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/**/*
        - package.json
        - bun.lock
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Lintチェック（条件分岐）
lint:check:
  stage: lint
  image: oven/bun:latest
  cache:
    <<: *cache_template
    policy: pull
  script:
    - echo "🔍 Running lint checks..."
    - bun run check:ci
  needs: ["install_dependencies"]
  <<: *rules_lint

# フロントエンドテスト（フロントエンド変更時のみ）
test:frontend:
  stage: test
  image: oven/bun:latest
  cache:
    <<: *cache_template
    policy: pull
  script:
    - echo "🧪 Running frontend tests with coverage..."
    - cd typescript/frontend
    - bun run test:coverage
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: typescript/frontend/coverage/cobertura-coverage.xml
    paths:
      - typescript/frontend/coverage/
    expire_in: 1 week
  needs: ["install_dependencies"]
  <<: *rules_frontend

# バックエンドテスト（バックエンド変更時のみ）
test:backend:
  stage: test
  image: oven/bun:latest
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: myapp_test
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/myapp_test"
  cache:
    <<: *cache_template
    policy: pull
  before_script:
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    - echo "⏳ PostgreSQLの準備完了を待機中..."
    - until pg_isready -h postgres -p 5432 -U testuser; do sleep 1; done
  script:
    - echo "🧪 Running backend tests with coverage..."
    - cd typescript/backend
    - echo "🔧 Generating Prisma client..."
    - bun run db:generate
    - echo "🚀 Running tests..."
    - bun run test:coverage
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: typescript/backend/coverage/cobertura-coverage.xml
    paths:
      - typescript/backend/coverage/
    expire_in: 1 week
  needs: ["install_dependencies"]
  <<: *rules_backend

# 統合テスト（両方に影響する変更時）
test:integration:
  stage: test
  image: oven/bun:latest
  services:
    - name: postgres:15
      alias: postgres
  variables:
    POSTGRES_DB: myapp_test
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/myapp_test"
  cache:
    <<: *cache_template
    policy: pull
  before_script:
    - apt-get update -qq && apt-get install -y -qq postgresql-client
    - until pg_isready -h postgres -p 5432 -U testuser; do sleep 1; done
  script:
    - echo "🧪 Running integration tests..."
    - cd typescript/backend && bun run db:generate
    - cd ../backend && bun run test:coverage
    - cd ../frontend && bun run test:coverage
  needs: ["install_dependencies"]
  rules:
    # ルートファイルやpackage.json変更時は統合テスト
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - package.json
        - bun.lock
        - "*.md"
        - ".gitlab-ci.yml"
    # メインブランチは統合テスト
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# カバレッジ検証（実行されたテストのみ）
coverage:validation:
  stage: coverage-report
  image: oven/bun:latest
  cache:
    <<: *cache_template
    policy: pull
  script:
    - echo "📊 Validating coverage thresholds..."
    # フロントエンドテストが実行された場合
    - |
      if [ -f "typescript/frontend/coverage/cobertura-coverage.xml" ]; then
        echo "Frontend coverage validation:"
        cd typescript/frontend && bun run test:coverage --reporter=text
        cd ..
      fi
    # バックエンドテストが実行された場合
    - |
      if [ -f "typescript/backend/coverage/cobertura-coverage.xml" ]; then
        echo "Backend coverage validation:"
        cd typescript/backend && bun run test:coverage --reporter=text
      fi
    - echo "✅ Coverage validation completed!"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - typescript/**/*
        - package.json
        - bun.lock
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false

# ビルド検証（フロントエンド変更時のみ）
build:frontend:
  stage: test
  image: oven/bun:latest
  cache:
    <<: *cache_template
    policy: pull
  script:
    - echo "🏗️ Building frontend for validation..."
    - cd typescript/frontend
    - bun run build
  artifacts:
    paths:
      - typescript/frontend/.next/
    expire_in: 1 hour
  needs: ["install_dependencies"]
  <<: *rules_frontend
